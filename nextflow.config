manifest {
    description = 'Spectral Library generation of OSW analysis'
    author = 'Patrick Pedrioli'
}

params {
    help = false
    dia_folder = 'Data/DIA'
    diau_threads = 28
    diau_se_params = 'Params/diaumpire_thermo_lib_se.params'
    dda_folder = 'Data/DDA'
    protein_db = 'Results/Databases/proteome.fasta'
    empty_mzxml = 'Params/empty.mzXML'	// Empty mzXML file used to quickly index fasta DB in Fragger
    fragger_threads = 28
    fragger_params = 'Params/fragger_closed.params'
    easypqp_unimod = 'Params/unimod.xml'
    easypqp_sumbsample_ratio = 0.01
    pyprophet_learn_threads = 4
    pi0_lambda_ppscore = "0.05 0.5 0.05"
    pi0_lambda_easypqp = "0.05 0.2 0.05"
    psm_fdr_threshold = 0.01
    peptide_fdr_threshold = 0.01
    protein_fdr_threshold = 0.01
    
//    comet_params = 'Params/comet.params'
//    comet_threads = 8		// This will be automatically set in the comet.params
//    tandem_params = 'Params/tandem_params.xml'
//    tandem_default_params = 'Params/isb_default_input_native.xml'
//    tandem_taxonomy = 'Params/taxonomy.xml'
//    tandem_threads = 8		// Make sure this corresponds to the value set in via <note type="input" label="spectrum, threads"> in the Tandem configuration

//    tpp = "-OAPdlIw -PPM"
//    decoy = "DECOY_"
//    mayu_steps = 100
//    mayu_missed_cleavages = 2
//    protein_xsl_file = "Params/protein_list.xsl"
    rt_file = "Params/irtkit.txt"
    st_fragmentation = "-cIHCD"
    st_fix_mods = "Params/fix_mods.txt"
    swath_window_file = "Params/swaths55.txt"
    precursor_upper_mz_limit = 1210
    product_lower_mz_limit = 200
    min_transitions = 3
    max_transitions = 6
}


process{
    withName:diaUmpire {
	container = 'quay.io/biocontainers/dia_umpire:2.1.3--1'
    }
    withName:mgf2mzxml {
	container = 'digitalproteomes/tpp-dev'
    }
    withName:msfraggerIndex {
	container = 'digitalproteomes/fragger'
    }
    withName:msfraggerSearch {
	container = 'digitalproteomes/fragger'
    }
    withName:msfraggerConvert {
	container = 'grosenberger/easypqp'
    }
    withName:pyprophetMerge {
	container = 'grosenberger/easypqp'
    }
    withName:pyprophetLearn {
	container = 'pyprophet/master:latest'
    }
    withName:pyprophetScore {
	container = 'pyprophet/master:latest'
    }
    withName:easypqp {
	container = 'grosenberger/easypqp:latest'
    }
//    withName:cometSearch {
//	container = 'digitalproteomes/comet'
//    }
//    withName:pooledCometTpp {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:tandemSearch {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:pooledTandemTpp {
//	container = 'digitalproteomes/tpp-dev'
//    }    
//    withName:interProphet {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:proteinProphet {
//	container = 'digitalproteomes/tpp-dev'
//    }    
//    withName:mayu {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:tppStat {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:parseMayuProt {
//	container = 'digitalproteomes/python'
//    }
//    withName:parseMayuPep {
//	container = 'digitalproteomes/python'
//    }    
//    withName:generateProteinList {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:spectraST {
//	container = 'digitalproteomes/tpp-dev'
//    }
//    withName:assayGenerator {
//	container = 'openswath/develop'
//    }
//    withName:decoyGenerator {
//	container = 'openswath/develop'
//   }
}

docker {
    enabled = true
    sudo = true
    runOptions = '-e LOCAL_USER_ID=$(id -u) -u $(id -u):$(id -g)'
}

executor {
     name = 'local'
     cpus = 28
     memory = '200 GB'
}
